<?php

/**
 * @file
 *
 */
module_load_include('inc', 'xml_form_builder', 'Edit'); // Needed to make use of AHAH functions...
module_load_include('inc', 'xml_form_builder', 'Preview'); // Needed to make use of AHAH functions...

/**
 * Constants
 */
define('PERM_XML_FORM_BUILDER_LIST_FORMS', 'List XML Forms');
define('PERM_XML_FORM_BUILDER_CREATE_FORMS', 'Create XML Forms');
define('PERM_XML_FORM_BUILDER_EDIT_FORMS', 'Edit XML Forms');
define('PERM_XML_FORM_BUILDER_DELETE_FORMS', 'Delete XML Forms');
define('MENU_XML_FORM_BUILDER_MAIN', 'admin/islandora/xmlform');
define('MENU_XML_FORM_BUILDER_CREATE', 'admin/islandora/xmlform/create');
define('MENU_XML_FORM_BUILDER_IMPORT', 'admin/islandora/xmlform/import');
define('MENU_XML_FORM_BUILDER_VIEW', 'admin/islandora/xmlform/%/view');
define('MENU_XML_FORM_BUILDER_COPY', 'admin/islandora/xmlform/%/copy');
define('MENU_XML_FORM_BUILDER_EDIT', 'admin/islandora/xmlform/%/edit');
define('MENU_XML_FORM_BUILDER_DELETE', 'admin/islandora/xmlform/%/delete');
define('MENU_CALLBACK_XML_FORM_BUILDER_EXPORT', 'admin/islandora/xmlform/%/export');
define('MENU_CALLBACK_XML_FORM_BUILDER_SAVE', 'admin/islandora/xmlform/%/edit/save');

/**
 * Implements hook_menu. Register menus().
 *
 * @return array
 */
function xml_form_builder_menu() {
  /**
   * Inital page. Lists the existing forms showing a preview of each. The user is provided with links for
   * creating, editing, deleting, or copying forms.
   */
  $items[MENU_XML_FORM_BUILDER_MAIN] = array(
    'title' => 'Form Builder',
    'description' => 'Create, manage and edit XML-based forms.',
    'file' => 'Main.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'xml_form_builder_main',
    //'page arguments' => array('xml_form_builder_main'),
    'access arguments' => array(PERM_XML_FORM_BUILDER_LIST_FORMS),
    'type' => MENU_NORMAL_ITEM,
  );
  /**
   * Presents a form that allows the user to create a new form.
   */
  $items[MENU_XML_FORM_BUILDER_CREATE] = array(
    'title' => 'Create Form',
    'description' => 'Create a new Form.',
    'file' => 'Create.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_create', 'create'),
    'access arguments' => array(PERM_XML_FORM_BUILDER_CREATE_FORMS),
    'type' => MENU_LOCAL_ACTION,
  );
  /**
   * Presents a form that allows the user to create a new form.
   */
  $items[MENU_XML_FORM_BUILDER_IMPORT] = array(
    'title' => 'Import Form',
    'description' => 'Import a form from an existing definition.',
    'file' => 'Create.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_create', 'import'),
    'access arguments' => array(PERM_XML_FORM_BUILDER_CREATE_FORMS),
    'type' => MENU_LOCAL_ACTION,
  );
  /**
   * View a form.
   */
  $items[MENU_XML_FORM_BUILDER_VIEW] = array(
    'title' => 'Preview Form',
    'description' => 'Preview a form.',
    'file' => 'Preview.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_preview', 3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_LIST_FORMS),
    'type' => MENU_CALLBACK,
  );
  /**
   * Export the form.
   */
  $items[MENU_CALLBACK_XML_FORM_BUILDER_EXPORT] = array(
    'title' => 'Export Form',
    'description' => 'Export a form.',
    'page callback' => 'xml_form_builder_export',
    'page arguments' => array(3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_LIST_FORMS),
    'type' => MENU_CALLBACK,
  );
  /**
   * Presents a form that allows the user to copy an existing form.
   */
  $items[MENU_XML_FORM_BUILDER_COPY] = array(
    'title' => 'Copy Form',
    'description' => 'Copy an existing Form.',
    'file' => 'Copy.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_copy', 3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_CREATE_FORMS),
    'type' => MENU_CALLBACK,
  );
  /**
   * Presents a form that allows the user to edit a form.
   */
  $items[MENU_XML_FORM_BUILDER_EDIT] = array(
    'title' => 'Edit Form',
    'description' => 'Edit a Form.',
    'file' => 'Edit.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'xml_form_builder_edit',
    'page arguments' => array(3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_EDIT_FORMS),
    'type' => MENU_CALLBACK,
  );
  /**
   * Callback used by the edit form to save changes made to the form.
   */
  $items[MENU_CALLBACK_XML_FORM_BUILDER_SAVE] = array(
    'title' => 'Edit Form',
    'description' => 'Edit a Form.',
    'file' => 'Edit.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'xml_form_builder_edit_save',
    'page arguments' => array(3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_EDIT_FORMS),
    'type' => MENU_CALLBACK,
  );
  /**
   * Presents a form that allows the user to delete a new form.
   */
  $items[MENU_XML_FORM_BUILDER_DELETE] = array(
    'title' => 'Delete Form',
    'description' => 'Delete a Form.',
    'file' => 'Delete.inc',
    'file path' => drupal_get_path('module', 'xml_form_builder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_delete', 3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_DELETE_FORMS),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form().
 *
 * @return array
 */
function xml_form_builder_forms($form_id, $xml) {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  if (XMLFormRepository::Exists($form_id) && XMLFormRepository::Valid($form_id)) {
    return array(
      $form_id => array(
        'callback' => 'xml_form_builder_get_form',
        'callback arguments' => array($form_id),
      ),
    );
  }
  return array(
    $form_id => array(),
  );
}

/**
 * Implements hook_permission. Register permissions().
 *
 * @return array
 */
function xml_form_builder_permission() {
  return array(
    PERM_XML_FORM_BUILDER_LIST_FORMS => array(
      'title' => t('View XML forms'),
      'description' => t('View a list of all currently available XML forms.'),
    ),
    PERM_XML_FORM_BUILDER_CREATE_FORMS => array(
      'title' => t('Create XML forms'),
      'description' => t('Create new XML forms using the Form Builder.'),
    ),
    PERM_XML_FORM_BUILDER_EDIT_FORMS => array(
      'title' => t('Edit XML forms'),
      'description' => t('Edit existing XML forms using the Form Builder.'),
    ),
    PERM_XML_FORM_BUILDER_DELETE_FORMS => array(
      'title' => t('Delete XML forms'),
      'description' => t('Permanently delete any XML form.'),
    ),
  );
}

/**
 * Downloads the XML Form Definition to the clients computer..
 *
 * @param string $form_name
 *   The name of the form to download.
 */
function xml_form_builder_export($form_name) {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  header('Content-Type: text/xml', TRUE);
  header('Content-Disposition: attachment; filename="' . $form_name . '.xml"');
  $definition = XMLFormRepository::Get($form_name);
  echo $definition->saveXML();

  exit();
}

/**
 * Gets the path to the copy page for the given form name.
 *
 * @param string $form_name
 *   The form to load the copy page with,
 *
 * @return string
 *   The path to the copy page.
 */
function xml_form_builder_get_copy_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_COPY);
}

/**
 * Gets the path to the edit page for the given form name.
 *
 * @param string $form_name
 *   The form to load the edit page with,
 *
 * @return string
 *   The path to the edit page.
 */
function xml_form_builder_get_edit_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_EDIT);
}

/**
 * Gets the path to the view page for the given form name.
 *
 * @param string $form_name
 *   The form to load the view page with,
 *
 * @return string
 *   The path to the view page.
 */
function xml_form_builder_get_view_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_VIEW);
}

/**
 * Gets the path to the delete page for the given form name.
 *
 * @param string $form_name
 *   The form to load the delete page with,
 *
 * @return string
 *   The path to the delete page.
 */
function xml_form_builder_get_export_form_path($form_name) {
  return str_replace('%', $form_name, MENU_CALLBACK_XML_FORM_BUILDER_EXPORT);
}

/**
 * Gets the path to the delete page for the given form name.
 *
 * @param string $form_name
 *   The form to load the delete page with,
 *
 * @return string
 *   The path to the delete page.
 */
function xml_form_builder_get_delete_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_DELETE);
}

/**
 * Gets a Form from the database.
 *
 * @param array $form_state
 *   The Drupal Form State
 * @param string $form_name
 *   The Form to render.
 * @param string $xml
 *   The metadata to prepopulate the form with,
 *
 * @return array
 *   The Drupal Form, if it exists FALSE otherwise.
 */
function xml_form_builder_get_form(array &$form_state, $form_name, $xml = NULL) {
  form_load_include($form_state, 'inc', 'xml_form_builder', 'XMLFormRepository');
  form_load_include($form_state, 'inc', 'xml_form_api', 'XMLForm');
  form_load_include($form_state, 'inc', 'xml_form_api', 'XMLFormDefinition');
  if (!XMLFormRepository::Exists($form_name)) {
    drupal_set_message(t('The form "%name" does not exist.', array('%name' => $form_name)));
    return FALSE;
  }
  else if (!XMLFormRepository::Valid($form_name)) {
    drupal_set_message(t('The drupal form "%name" exists but is not valid please notify the administrator.', array('%name' => $form_name)));
    return FALSE;
  }
  try {
    $xml_form = new XMLForm($form_state);
    if (!$xml_form->isInitialized()) { // Was not initialized from storage.
      $definition = new XMLFormDefinition(XMLFormRepository::Get($form_name));
      $document = $definition->createXMLDocument($xml);
      $form = $definition->getForm();
      $xml_form->initialize($form, $document);
    }
    /**
     * Deals with a bug in drupals AHAH, where the user would be redirected to a different page.
     * This is fixed in Drupal 7.
     *
     * This bit of code ensures that the url from which this function is called is the url where the code submits.
     * Rather than the last used AHAH callback.
     */
    $xml_form['#action'] = $form_state['storage']['#action'] = isset($form_state['storage']['#action']) ? $form_state['storage']['#action'] : url($_GET['q']); // AHAH bug workaround.
    $form = $xml_form->toArray($form_state);
  }
  catch (Exception $e) {
    /**
     * Catch any errors that occured and display them to the user so that they may correct their form definition.
     */
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message(filter_xss($msg), 'error');
    return FALSE;
  }
  return $form;
}
