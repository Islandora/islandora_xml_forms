<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

// Constants.
define('PERM_XML_FORM_BUILDER_LIST_FORMS', 'List XML Forms');
define('PERM_XML_FORM_BUILDER_CREATE_FORMS', 'Create XML Forms');
define('PERM_XML_FORM_BUILDER_EDIT_FORMS', 'Edit XML Forms');
define('PERM_XML_FORM_BUILDER_DELETE_FORMS', 'Delete XML Forms');
define('PERM_XML_FORM_BUILDER_ASSOCIATE_FORMS', 'Associate XML Forms');
define('MENU_XML_FORM_BUILDER_MAIN', 'admin/islandora/xmlform');
define('MENU_XML_FORM_BUILDER_CREATE', 'admin/islandora/xmlform/create');
define('MENU_XML_FORM_BUILDER_IMPORT', 'admin/islandora/xmlform/import');
define('MENU_XML_FORM_BUILDER_VIEW', 'admin/islandora/xmlform/%/view');
define('MENU_XML_FORM_BUILDER_COPY', 'admin/islandora/xmlform/%/copy');
define('MENU_XML_FORM_BUILDER_EDIT', 'admin/islandora/xmlform/%/edit');
define('MENU_XML_FORM_BUILDER_DELETE', 'admin/islandora/xmlform/%/delete');
define('MENU_XML_FORM_BUILDER_ASSOCIATIONS', 'admin/islandora/xmlform/%/associations');
define('MENU_XML_FORM_BUILDER_ASSOCIATE', 'admin/islandora/xmlform/%/associate/%');
define('MENU_XML_FORM_BUILDER_DISASSOCIATE', 'admin/islandora/xmlform/%/disassociate/%');
define('MENU_XML_FORM_BUILDER_CONTENT_MODEL_AUTOCOMPLETE', 'admin/islandora/xmlform_autocomplete');
define('MENU_CALLBACK_XML_FORM_BUILDER_EXPORT', 'admin/islandora/xmlform/%/export');
define('MENU_CALLBACK_XML_FORM_BUILDER_SAVE', 'admin/islandora/xmlform/%/edit/save');
define('MENU_XML_FORM_BUILDER_EDIT_DATASTREAM', 'islandora/edit_form/%islandora_object/%islandora_datastream');

/**
 * Implements hook_menu().
 */
function xml_form_builder_menu() {
  $items[MENU_XML_FORM_BUILDER_MAIN] = array(
    'title' => 'Form Builder',
    'description' => 'Create, manage and edit XML-based forms.',
    'file' => 'Main.inc',
    'page callback' => 'xml_form_builder_main',
    'access arguments' => array(PERM_XML_FORM_BUILDER_LIST_FORMS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items[MENU_XML_FORM_BUILDER_CREATE] = array(
    'title' => 'Create Form',
    'description' => 'Create a new Form.',
    'file' => 'Create.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_create', 'create'),
    'access arguments' => array(PERM_XML_FORM_BUILDER_CREATE_FORMS),
    'type' => MENU_LOCAL_ACTION,
  );
  $items[MENU_XML_FORM_BUILDER_IMPORT] = array(
    'title' => 'Import Form',
    'description' => 'Import a form from an existing definition.',
    'file' => 'Create.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_create', 'import'),
    'access arguments' => array(PERM_XML_FORM_BUILDER_CREATE_FORMS),
    'type' => MENU_LOCAL_ACTION,
  );
  $items[MENU_XML_FORM_BUILDER_VIEW] = array(
    'title' => 'Preview Form',
    'description' => 'Preview a form.',
    'file' => 'Preview.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_preview', 3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_LIST_FORMS),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_CALLBACK_XML_FORM_BUILDER_EXPORT] = array(
    'title' => 'Export Form',
    'description' => 'Export a form.',
    'page callback' => 'xml_form_builder_export',
    'page arguments' => array(3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_LIST_FORMS),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_XML_FORM_BUILDER_COPY] = array(
    'title' => 'Copy Form',
    'description' => 'Copy an existing Form.',
    'file' => 'Copy.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_copy', 3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_CREATE_FORMS),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_XML_FORM_BUILDER_EDIT] = array(
    'title' => 'Edit Form',
    'description' => 'Edit a Form.',
    'file' => 'Edit.inc',
    'page callback' => 'xml_form_builder_edit',
    'page arguments' => array(3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_EDIT_FORMS),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_CALLBACK_XML_FORM_BUILDER_SAVE] = array(
    'title' => 'Edit Form',
    'description' => 'Edit a Form.',
    'file' => 'Edit.inc',
    'page callback' => 'xml_form_builder_edit_save',
    'page arguments' => array(3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_EDIT_FORMS),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_XML_FORM_BUILDER_DELETE] = array(
    'title' => 'Delete Form',
    'description' => 'Delete a Form.',
    'file' => 'Delete.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_delete', 3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_DELETE_FORMS),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_XML_FORM_BUILDER_ASSOCIATIONS] = array(
    'title' => 'Associate Form "@form"',
    'title arguments' => array('@form' => 3),
    'description' => 'Associate a form.',
    'file' => 'includes/associations.form.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_associations_form', 3),
    'access arguments' => array(PERM_XML_FORM_BUILDER_ASSOCIATE_FORMS),
    'type' => MENU_CALLBACK,
    'tab_parent' => MENU_XML_FORM_BUILDER_MAIN,
  );
  // Remove existing associations, redirect back to list.
  $items[MENU_XML_FORM_BUILDER_DISASSOCIATE] = array(
    'title' => 'Disable Form Association',
    'description' => 'Disable associated form.',
    'file' => 'includes/associations.form.inc',
    'page callback' => 'xml_form_builder_disable_association',
    'page arguments' => array(3,5),
    // @todo Use something fedora specific.
    'access arguments' => array(PERM_XML_FORM_BUILDER_ASSOCIATE_FORMS),
    'type' => MENU_CALLBACK,
  );
  // Enable default/hook associations, redirect back to list.
  $items[MENU_XML_FORM_BUILDER_ASSOCIATE] = array(
    'title' => 'Enable Form Association',
    'description' => 'Enables an associated form.',
    'file' => 'includes/associations.form.inc',
    'page callback' => 'xml_form_builder_enable_association',
    'page arguments' => array(3,5),
    // @todo Use something fedora specific.
    'access arguments' => array(PERM_XML_FORM_BUILDER_ASSOCIATE_FORMS),
    'type' => MENU_CALLBACK,
  );
  // Enable default/hook associations, redirect back to list.
  $items[MENU_XML_FORM_BUILDER_CONTENT_MODEL_AUTOCOMPLETE] = array(
    'title' => 'Autocomplete callback',
    'description' => 'Autocomplete a Fedora content model PID.',
    'file' => 'includes/content_models.autocomplete.inc',
    'page callback' => 'xml_form_builder_content_model_autocomplete',
    'page arguments' => array(3,5),
    // @todo Use something fedora specific.
    'access arguments' => array(PERM_XML_FORM_BUILDER_ASSOCIATE_FORMS),
    'type' => MENU_CALLBACK,
  );
  $items[MENU_XML_FORM_BUILDER_EDIT_DATASTREAM] = array(
    'title' => 'Edit datastream',
    'file' => 'includes/edit_datastream.form.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xml_form_builder_edit_datastream_form', 3),
    'access callback' => 'islandora_object_datastream_access_callback',
    'access arguments' => array(FEDORA_METADATA_EDIT, 2, 3),
    'load arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function xml_form_builder_admin_paths() {
  $paths = array();
  $paths['islandora/edit_form/*/*'] = TRUE;
  return $paths;
}

/**
 * Implements hook_forms().
 *
 * Acquires the form from XMLFormRepository, if it exists and is valid.
 */
function xml_form_builder_forms($form_id, $args) {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  if (XMLFormRepository::Exists($form_id) && XMLFormRepository::Valid($form_id)) {
    return array(
      $form_id => array(
        'callback' => 'xml_form_builder_get_form',
        'callback arguments' => array($form_id),
      ),
    );
  }
  return array(
    $form_id => array(),
  );
}

/**
 * Implements hook_permission().
 */
function xml_form_builder_permission() {
  return array(
    PERM_XML_FORM_BUILDER_LIST_FORMS => array(
      'title' => t('View XML forms'),
      'description' => t('View a list of all currently available XML forms.'),
    ),
    PERM_XML_FORM_BUILDER_CREATE_FORMS => array(
      'title' => t('Create XML forms'),
      'description' => t('Create new XML forms using the Form Builder.'),
    ),
    PERM_XML_FORM_BUILDER_EDIT_FORMS => array(
      'title' => t('Edit XML forms'),
      'description' => t('Edit existing XML forms using the Form Builder.'),
    ),
    PERM_XML_FORM_BUILDER_DELETE_FORMS => array(
      'title' => t('Delete XML forms'),
      'description' => t('Permanently delete any XML form.'),
    ),
    PERM_XML_FORM_BUILDER_ASSOCIATE_FORMS => array(
      'title' => t('Associate XML forms'),
      'description' => t('Associate forms with content models and datastream identifiers.'),
    ),
  );
}

/**
 * Downloads the XML Form Definition to the clients computer..
 *
 * @param string $form_name
 *   The name of the form to download.
 */
function xml_form_builder_export($form_name) {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  header('Content-Type: text/xml', TRUE);
  header('Content-Disposition: attachment; filename="' . $form_name . '.xml"');
  $definition = XMLFormRepository::Get($form_name);
  echo $definition->saveXML();
  exit();
}

/**
 * Gets the path to the copy page for the given form name.
 *
 * @param string $form_name
 *   The form to load the copy page with,
 *
 * @return string
 *   The path to the copy page.
 */
function xml_form_builder_get_copy_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_COPY);
}

/**
 * Gets the path to the edit page for the given form name.
 *
 * @param string $form_name
 *   The form to load the edit page with,
 *
 * @return string
 *   The path to the edit page.
 */
function xml_form_builder_get_edit_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_EDIT);
}

/**
 * Gets the path to the view page for the given form name.
 *
 * @param string $form_name
 *   The form to load the view page with,
 *
 * @return string
 *   The path to the view page.
 */
function xml_form_builder_get_view_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_VIEW);
}

/**
 * Gets the path to the delete page for the given form name.
 *
 * @param string $form_name
 *   The form to load the delete page with,
 *
 * @return string
 *   The path to the delete page.
 */
function xml_form_builder_get_export_form_path($form_name) {
  return str_replace('%', $form_name, MENU_CALLBACK_XML_FORM_BUILDER_EXPORT);
}

/**
 * Gets the path to the delete page for the given form name.
 *
 * @param string $form_name
 *   The form to load the delete page with,
 *
 * @return string
 *   The path to the delete page.
 */
function xml_form_builder_get_delete_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_DELETE);
}

/**
 * Gets the path to the associations page for the given form name.
 *
 * @param string $form_name
 *   The form to load the associations page with,
 *
 * @return string
 *   The path to the associations page.
 */
function xml_form_builder_get_associate_form_path($form_name) {
  return str_replace('%', $form_name, MENU_XML_FORM_BUILDER_ASSOCIATIONS);
}

/**
 * Gets a Form from the database.
 *
 * @param array $form
 *   An array containing any "wrapping" elements.
 * @param array $form_state
 *   The Drupal Form State
 * @param string $form_name
 *   The Form to render.
 * @param string $xml
 *   The metadata to prepopulate the form with,
 *
 * @return array
 *   The Drupal Form, if it exists FALSE otherwise.
 */
function xml_form_builder_get_form(array $form, array &$form_state, $form_name, $xml = NULL) {
  form_load_include($form_state, 'inc', 'xml_form_builder', 'XMLFormRepository');
  form_load_include($form_state, 'inc', 'xml_form_api', 'XMLForm');
  form_load_include($form_state, 'inc', 'xml_form_api', 'XMLFormDefinition');
  if (!XMLFormRepository::Exists($form_name)) {
    drupal_set_message(t('The form "%name" does not exist.', array('%name' => $form_name)));
    return FALSE;
  }
  elseif (!XMLFormRepository::Valid($form_name)) {
    drupal_set_message(t('The drupal form "%name" exists but is not valid please notify the administrator.', array('%name' => $form_name)));
    return FALSE;
  }
  try {
    $xml_form = new XMLForm($form_state);
    // Was not initialized from storage.
    if (!$xml_form->isInitialized()) {
      $definition = new XMLFormDefinition(XMLFormRepository::Get($form_name));
      $document = $definition->createXMLDocument($xml);
      $form = $definition->getForm();
      $xml_form->initialize($form, $document);
    }
    $form = array_merge($form, $xml_form->toArray($form_state));
  }
  catch (Exception $e) {
    // Catch any errors that occured and display them to the user so that they
    // may correct their form definition.
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message(filter_xss($msg), 'error');
    return FALSE;
  }
  return $form;
}

/**
 * Implements hook_theme().
 */
function xml_form_builder_theme() {
  return array(
    'xml_form_builder_association_table' => array(
      'variables' => array('associations' => NULL),
      'template' => 'xml-form-builder-association-table',
      'path' => drupal_get_path('module', 'xml_form_builder') . '/templates',
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 *
 * If the given configuration has more that one metadata form association add
 * the select form step, if it only has one
 * The add that metadata form as a step.
 */
function xml_form_builder_islandora_ingest_steps(array &$form_state) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  $metadata_step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_metadata_step');
  $association_step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_association_step');
  $association_step_storage['models'] = isset($association_step_storage['models']) ? $association_step_storage['models'] : $shared_storage['models'];
  $associations = xml_form_builder_get_associations(array(), $association_step_storage['models'], array());
  $metadata_step_storage['association'] = isset($metadata_step_storage['association']) ? $metadata_step_storage['association'] : current($associations);
  $num_associations = count($associations);
  $select_association_step = ($num_associations > 1) ? array(
    'weight' => 0,
    'type' => 'form',
    'form_id' => 'xml_form_builder_select_association_form',
    'module' => 'xml_form_builder',
    'file' => 'includes/select_association.form.inc',
    'args' => array($associations),
  ) : NULL;
  $metadata_step = ($num_associations >= 1) ? array(
    'weight' => 5,
    'type' => 'form',
    'form_id' => 'xml_form_builder_ingest_form',
    'module' => 'xml_form_builder',
    'file' => 'includes/ingest.form.inc',
    'args' => array($metadata_step_storage['association']),
  ) : NULL;
  return array(
    'xml_form_builder_association_step' => $select_association_step,
    'xml_form_builder_metadata_step' => $metadata_step,
  );
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
function xml_form_builder_islandora_edit_datastream_registry(FedoraObject $object, FedoraDatastream $datastream) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $associations = xml_form_builder_get_associations(array(), $object->models, array($datastream->id));
  if (count($associations) > 0) {
    return array(
      array(
        'Name' => t('Islandora Content Model Forms'),
        'url' => "islandora/edit_form/{$object->id}/{$datastream->id}",
        'weight' => 5,
      ),
    );
  }
}

/**
 * This function is used by ingest/edit to update the given object.
 *
 * @param AbstractFedoraObject $object
 *   The object to update.
 * @param array $association
 *   The association used to update the objects datastreams.
 * @param XMLDocument $document
 *   The generated metadata document to add to the object.
 * @param string $label
 *   A new label for the given object.
 *
 * @return array
 *   An associative array where the keys are DSID's and the values are booleans
 *   that state if the given datastream was created (TRUE) or updated (FALSE).
 */
function xml_form_builder_update_object(AbstractFedoraObject $object, array $association, XMLDocument $document, $label) {
  $object->label = $label;
  $object->models = array($association['content_model']);
  $document = $document->document;
  $created = xml_form_builder_update_metadata_datastream($object, $association['dsid'], $document);
  $created_dc = xml_form_builder_update_dc_datastream($object, $association['transform'], $document);
  return array($association['dsid'] => $created, 'DC' => $created_dc);
}

/**
 * Updates the given metadata datastream with the given document.
 *
 * @param AbstractFedoraObject $object
 *   The object to update.
 * @param array $datastream_id
 *   The datastream to update.
 * @param DOMDocument $document
 *   The document to transform.
 *
 * @return bool
 *   TRUE if the datastream was created, FALSE if it was updated.
 */
function xml_form_builder_update_metadata_datastream(AbstractFedoraObject $object, $datastream_id, DOMDocument $document) {
  $created = FALSE;
  if (empty($object[$datastream_id])) {
    $datastream = $object->constructDatastream($datastream_id, 'M');
    $object->ingestDatastream($datastream);
    $created = TRUE;
  }
  else {
    $datastream = $object[$datastream_id];
  }
  $document->preserveWhiteSpace = TRUE;
  $document->formatOutput = TRUE;
  $datastream->setContentFromString(trim($document->saveXML()));
  $datastream->label = "$datastream_id Record";
  $datastream->mimetype = 'text/xml';
  return $created;
}

/**
 * Updates the DC datastream by applying the given transform.
 *
 * @param AbstractFedoraObject $object
 *   The object whose DC will be updated.
 * @param string $transform
 *   The transform to apply, as defined by the forms association.
 * @param DOMDocument $document
 *   The document to transform.
 */
function xml_form_builder_update_dc_datastream(AbstractFedoraObject $object, $transform, DOMDocument $document) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $created = FALSE;
  $transform = xml_form_builder_get_transform_file($transform);
  if ($transform) {
    if (empty($object['DC'])) {
      $dc_datastream = $object->constructDatastream('DC', 'X');
      $dc_datastream->label = 'DC Record';
      $object->ingestDatastream($dc_datastream);
      $created = TRUE;
    }
    else {
      $dc_datastream = $object['DC'];
    }
    $transformed_dc_doc = xml_form_builder_transform_document($transform, $document, $object);
    $dc_datastream->setContentFromString($transformed_dc_doc->saveXML());
  }
  return $created;
}
